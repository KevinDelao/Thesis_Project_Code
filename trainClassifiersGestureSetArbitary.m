%% Run classification on different gesture sets saving test set results
%% and classifiers generated to savePath
% Trains: KNN, LDA, SVM-RBF, SVM-L and DT classifiers (see readme)
% Requires features to have been extracted with extractFeatures.m
% Requires gesture array to be updated by extractGesture.m
% Requires repetition array to be updated by extractRepetition.m
% Requires a gestureOrder array generated by getGestureOrders.m
%
% Estimated run time: Days (10min - 8 hours per gesture set depending on number of gestures)
% Optionally classifiers can be saved (uncomment code) however these files will be large (up to >300mb)


%% Housekeeping
clear; clc;

%% Settings
addpath('D:\Thesis_DataSets\db3_feat') % Database path: ***EDIT ACCORDIGNLY***
addpath('D:\Thesis_DataSets\db3_gesture') % Gesture array path: ***EDIT ACCORDIGNLY***
addpath('D:\Thesis_DataSets\db3_gestureOrders_VAR') % Gesture order array path: 
addpath('D:\Thesis_DataSets\db3_repetition') % Repetition array path: 

savePath = 'D:\Thesis_DataSets\db3_results_VAR'; % Save path: 

gestureOrderPair = {'gestureOrderArbitaryVAR' 'Arbitary'} ;  % File_name-label for gesture order: ***EDIT ACCORDIGNLY***

featureSets = {'VAR' 'emgVAR'; % Easily expandable to more feature-array_name pairs
               %'MDWT' 'emgMDWT' % Example extension
               };

knnNeighbours = 10;
subSampleRate = 10;
standardise = true;

%% Important stuff
rng(1); % For reproducibility

%% Output Data
%11 for db3, 27 for db1
% predictions = cell(11,size(featureSets,1),6);
% classifiers = cell(11,size(featureSets,1),6);
% testClassesAll = cell(11,1);
predictions = cell(11,size(featureSets,1),1);
classifiers = cell(11,size(featureSets,1),1);
testClassesAll = cell(11,1);
for feature = 1:size(featureSets,1)
    eval(['load ' gestureOrderPair{1}]); % Load gesture order
    %53 total for db1, 50 for db 3
    for numGesturesToUse = 34:50
        tic
        disp(numGesturesToUse);
        %% Loop through all subjects, 11 for db3 27 for db1
        for subject=1:11
            eval(['load s' num2str(subject) '_feat.mat']); % Load data
            eval(['load s' num2str(subject) '_rep.mat']); % Load relabelled repetitions
            eval(['load s' num2str(subject) '_gestureMajority.mat']); % Load gestures (majority)

            %% Remove gestures we're not using
            unUsedGestures = gestureOrder(subject,numGesturesToUse+1:end);
            indicesToRemove = ismember(gesture,unUsedGestures);

            gesture(indicesToRemove) = [];
            rep(indicesToRemove) = [];
            for ii=1:size(featureSets,1)
                eval([featureSets{ii,2} '(indicesToRemove,:) = [];']);
            end

            numGestures = numel(unique((gesture)));

            %% Data Split (Indices)
            %for db1
%             trainReps = [1 3 5 7 9];
%             testingReps = [2 4 6 8 10];
            trainReps = [1 2 3];
            testingReps = [4 5 6];
            numGestures = numel(unique((gesture)));
            numSamples = numel(gesture);

            trainIndices = ismember(rep,trainReps);
            testIndices = ismember(rep,testingReps);

            %% Subsample training data
            i = 1;
            for m = 1:numel(trainIndices)
                if mod(i,subSampleRate)
                    trainIndices(m) = 0;
                end
                i = i + 1;
            end

            %% Resample training data so rest has as many examples as the next most represented class
            trainCounts = histc(gesture(trainIndices),unique(gesture));
            maxGestureExamples = max(trainCounts(1:end-1)); % NOTE: unique still returns list in ascending order
            %53 for db1, 50 db3
            trainRestIndices = find(gesture == 50 & trainIndices == true);

            tempIndex = randperm(numel(trainRestIndices));
            indicesToRemove = trainRestIndices(tempIndex(maxGestureExamples+1:end));
            trainIndices(indicesToRemove) = 0;

            eval(['dataSet = ' featureSets{feature,2} ';']);

            %% Data Split Actual
            trainingData = dataSet(trainIndices,:);
            trainingClasses = gesture(trainIndices);
            numTraining = numel(trainingClasses);

            testData = dataSet(testIndices,:);
            testClasses = gesture(testIndices);
            numTesting = numel(testClasses);

%             %% KNN classifier
%             classifierKNN = fitcknn(...
%                 trainingData, ...
%                 trainingClasses, ...
%                 'Distance', 'Euclidean', ...
%                 'Exponent', [], ...
%                 'NumNeighbors', knnNeighbours, ...
%                 'DistanceWeight', 'Equal', ...
%                 'Standardize', standardise);
% 
%             knnPredictions = predict(classifierKNN,testData);
% 
%             %% LDA classifier
%             classifierLDA = fitcdiscr(...
%                 trainingData, ...
%                 trainingClasses, ...
%                 'DiscrimType', 'pseudoLinear', ...
%                 'FillCoeffs', 'off', ...
%                 'SaveMemory', 'on');
% 
%             ldaPredictions = predict(classifierLDA,testData);
% 
%             %% SVM classifier (rbf)
%             templateRBFSVM = templateSVM(...
%                 'KernelFunction', 'rbf', ...
%                 'PolynomialOrder', [], ...
%                 'KernelScale', 'auto', ...
%                 'BoxConstraint', 1, ...
%                 'Standardize', standardise);
% 
%             classificationRBFSVM = fitcecoc(...
%                 trainingData, ...
%                 trainingClasses, ...
%                 'Learners', templateRBFSVM, ...
%                 'Coding', 'onevsall');
% 
%             rbfSVMPredictions = predict(classificationRBFSVM,testData);
% 
%             %% SVM classifier (linear)
%             templateLINSVM = templateSVM(...
%                 'KernelFunction', 'linear', ...
%                 'PolynomialOrder', [], ...
%                 'KernelScale', 'auto', ...
%                 'BoxConstraint', 1, ...
%                 'Standardize', standardise);
% 
%             classificationLINSVM = fitcecoc(...
%                 trainingData, ...
%                 trainingClasses, ...
%                 'Learners', templateLINSVM, ...
%                 'Coding', 'onevsone');
% 
%             linearSVMPredictions = predict(classificationLINSVM,testData);
% 
%             %% Decision Tree Classifier
%             classificationTree = fitctree(...
%                 trainingData, ...
%                 trainingClasses, ...
%                 'SplitCriterion', 'gdi', ...
%                 'MaxNumSplits', 150, ...
%                 'Surrogate', 'off');
% 
%             treePredictions = predict(classificationTree,testData);
            
        %% Random Forest Classifier
        templateForest =  TreeBagger(50,trainingData,trainingClasses,'OOBPrediction','On','Method','classification','Surrogate','off');
        forestPredictions = predict(templateForest, testData);
        

            %% Save Stuff
            predictions{subject,feature,1} = str2double(forestPredictions);

%             predictions{subject,feature,1} = knnPredictions;
%             predictions{subject,feature,2} = ldaPredictions;
%             predictions{subject,feature,3} = rbfSVMPredictions;
%             predictions{subject,feature,4} = linearSVMPredictions;
%             predictions{subject,feature,5} = treePredictions;
%             predictions{subject,feature,6} = str2double(forestPredictions);
      
            testClassesAll{subject} = testClasses;
        end

        trainTime = toc;
        % save([savePath '\classifiejrs' featureSets{feature,1} gestureOrderPair{2} num2str(numGesturesToUse) '.mat'] ...
        %      ,'classifiers'); % Enable to save classifiers
        save([savePath '\predictions' featureSets{feature,1} gestureOrderPair{2} num2str(numGesturesToUse) '.mat'] ...
             ,'predictions','testClassesAll','trainTime');
    end
end